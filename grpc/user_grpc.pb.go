// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: user.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreakAiServiceClient is the client API for StreakAiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreakAiServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	LogOut(ctx context.Context, in *LogOutRequest, opts ...grpc.CallOption) (*LogOutResponse, error)
	CheckAuthorized(ctx context.Context, in *CheckAuthorizedReq, opts ...grpc.CallOption) (*CheckAuthorizedRes, error)
}

type streakAiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreakAiServiceClient(cc grpc.ClientConnInterface) StreakAiServiceClient {
	return &streakAiServiceClient{cc}
}

func (c *streakAiServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/grpc.StreakAiService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streakAiServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/grpc.StreakAiService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streakAiServiceClient) LogOut(ctx context.Context, in *LogOutRequest, opts ...grpc.CallOption) (*LogOutResponse, error) {
	out := new(LogOutResponse)
	err := c.cc.Invoke(ctx, "/grpc.StreakAiService/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streakAiServiceClient) CheckAuthorized(ctx context.Context, in *CheckAuthorizedReq, opts ...grpc.CallOption) (*CheckAuthorizedRes, error) {
	out := new(CheckAuthorizedRes)
	err := c.cc.Invoke(ctx, "/grpc.StreakAiService/CheckAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreakAiServiceServer is the server API for StreakAiService service.
// All implementations must embed UnimplementedStreakAiServiceServer
// for forward compatibility
type StreakAiServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	LogOut(context.Context, *LogOutRequest) (*LogOutResponse, error)
	CheckAuthorized(context.Context, *CheckAuthorizedReq) (*CheckAuthorizedRes, error)
	mustEmbedUnimplementedStreakAiServiceServer()
}

// UnimplementedStreakAiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreakAiServiceServer struct {
}

func (UnimplementedStreakAiServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStreakAiServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStreakAiServiceServer) LogOut(context.Context, *LogOutRequest) (*LogOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedStreakAiServiceServer) CheckAuthorized(context.Context, *CheckAuthorizedReq) (*CheckAuthorizedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorized not implemented")
}
func (UnimplementedStreakAiServiceServer) mustEmbedUnimplementedStreakAiServiceServer() {}

// UnsafeStreakAiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreakAiServiceServer will
// result in compilation errors.
type UnsafeStreakAiServiceServer interface {
	mustEmbedUnimplementedStreakAiServiceServer()
}

func RegisterStreakAiServiceServer(s grpc.ServiceRegistrar, srv StreakAiServiceServer) {
	s.RegisterService(&StreakAiService_ServiceDesc, srv)
}

func _StreakAiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreakAiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StreakAiService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreakAiServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreakAiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreakAiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StreakAiService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreakAiServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreakAiService_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreakAiServiceServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StreakAiService/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreakAiServiceServer).LogOut(ctx, req.(*LogOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreakAiService_CheckAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreakAiServiceServer).CheckAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StreakAiService/CheckAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreakAiServiceServer).CheckAuthorized(ctx, req.(*CheckAuthorizedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StreakAiService_ServiceDesc is the grpc.ServiceDesc for StreakAiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreakAiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.StreakAiService",
	HandlerType: (*StreakAiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _StreakAiService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _StreakAiService_Register_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _StreakAiService_LogOut_Handler,
		},
		{
			MethodName: "CheckAuthorized",
			Handler:    _StreakAiService_CheckAuthorized_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
